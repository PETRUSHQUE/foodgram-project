name: Foodgram Workflow

on: [push]

jobs:

  tests:
    name: Тестирование
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Установка Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Установка зависимостей
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/requirements.txt 
    - name: Тестирование flake8
      run: |
        cd backend
        python -m flake8

  build_and_push_to_docker_hub:
      name: Сборка и отправка образа на DockerHub
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Проверка репозитория
          uses: actions/checkout@v2 
        - name: Установка Docker Buildx
          uses: docker/setup-buildx-action@v1 
        - name: Логин в Docker
          uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKER_USERNAME }} 
            password: ${{ secrets.DOCKER_PASSWORD }} 
        - name: Отправка в DockerHub
          uses: docker/build-push-action@v2 
          with:
            push: true
            tags: petrushque/foodgram:latest
            context: backend
            file: backend/Dockerfile

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build_and_push_to_docker_hub
    steps:
    - name: Выполнение удалённых ssh команд к развертыванию
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker container rm $(sudo docker ps -a -q)
          sudo docker rmi $(sudo docker images -a -q)
          sudo docker volume rm $(sudo docker volume ls -q)
          touch .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
          echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
          echo EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} >> .env
          echo EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }} >> .env
          sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Отправка сообщения в Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен! 
